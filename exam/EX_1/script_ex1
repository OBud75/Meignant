#Créer un dossier "assets" à la racine du dossier d'exam
	#aller dans le dossier exam
	mkdir assets
	

#Dans ce dossier, créer 10 fichiers "img_1.png", "img_2.png" ...
	touch img_{1..10}.png
	

#Dans ce même dossier, créer un fichier "du_texte.txt" contenant "Hello, world".
	echo "Hello, world">> du_text.txt


#Renommer tous les fichiers .png du dossier en "img_1.jpeg", "img_2.jpeg" ...
	for i in img_*.png; do mv "$i" "${i%.png}.jpeg"; done


#Créer un dossier "medias" dans le dossier "assets", déplacez y tous les fichiez .jpeg du dossier "assets".
	mkdir medias
	mv *.jpeg medias/

#A quoi servent les formats de fichiers (.png, .txt, .jpeg) ?
	Ils servent à connaître le type de contenu d'un fichiers mais, ils permettent
	aussi de savoir comment interpréter ou lire les fichiers. 

-> Sur windows cela permet à l'ordinateur de savoir avec quel programme il peut ouvrir le fichier, mais sur Linux c'est surtout l'en tête du fichier qui sert à cela.
Par contre dans certains cas cela aide le programme lancé pour lire le fichier
Un bon exemple est la manière dont certaines applications graphiques ou multimédias sous Linux se comportent :
Si on essaiee d’ouvrir un fichier .jpg avec un éditeur de texte comme nano, il ne prendra pas en compte l’extension et affichera du texte illisible.
Par contre, si on le renomme en .txt et qu'on tente de l’ouvrir avec "Eye of GNOME" (visionneuse d'images), il refusera de le charger.


#Créer un fichier "script" (toujours dans le dossier) qui affiche "Hello world", ajoutez #!/usr/bin/bash
	touch script
	
	#après modification du fichier
	chmod +x script

#A quoi sert la ligne #!/usr/bin/bash ? Quelles différences avec le lancement du script via "bash script" ?
	la ligne #!/usr/bin/bash est un shebang et elle indique l'interpréteur qui doit
	être utilisé (ici bash).
	La différence avec le lancement via "bash script" est que "bash script" ignore
	le shebang et utilise l'interpréteur bash.

-> Oui, il y a quelques spécificitéés au niveau des permissions : 
Avec ./script, on execute le fichier (et on a donc besoin de la permission d'executer), puis dans le header linux lit le shebang et voit qu'il peut confier la lecture à Bash
Par contre avec bash script, on dit nous même de lire le fichier avec bash, pas besoin de permission d'executer (mais besoin de la permission de lire).
